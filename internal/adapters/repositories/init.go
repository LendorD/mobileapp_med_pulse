package repositories

import (
	"fmt"
	"log"
	"os"
	"time"

	"github.com/AlexanderMorozov1919/mobileapp/internal/adapters/repositories/medcard"
	receptionSmp "github.com/AlexanderMorozov1919/mobileapp/internal/adapters/repositories/reception_smp"
	"github.com/AlexanderMorozov1919/mobileapp/internal/adapters/repositories/tx"
	"github.com/AlexanderMorozov1919/mobileapp/internal/domain/entities"
	"golang.org/x/crypto/bcrypt"

	"github.com/AlexanderMorozov1919/mobileapp/internal/adapters/repositories/auth"
	"github.com/AlexanderMorozov1919/mobileapp/internal/adapters/repositories/doctor"
	"github.com/AlexanderMorozov1919/mobileapp/internal/adapters/repositories/patient"
	"github.com/AlexanderMorozov1919/mobileapp/internal/config"
	"github.com/AlexanderMorozov1919/mobileapp/internal/interfaces"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

type Repository struct {
	interfaces.AuthRepository
	interfaces.DoctorRepository
	interfaces.PatientRepository
	interfaces.ReceptionSmpRepository
	interfaces.MedicalCardRepository
	interfaces.TxManager
}

func NewRepository(cfg *config.Config) (interfaces.Repository, error) {
	//logger := logging.NewModuleLogger("ADAPTER", "POSTGRES", parentLogger)

	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		cfg.Database.Host,
		cfg.Database.Username,
		cfg.Database.Password,
		cfg.Database.DBName,
		cfg.Database.Port,
	)

	newLogger := logger.New(
		log.New(os.Stdout, "\r\n", log.LstdFlags), // –í—ã–≤–æ–¥ –≤ stdout
		logger.Config{
			SlowThreshold:             200 * time.Millisecond, // –ü–æ—Ä–æ–≥ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
			LogLevel:                  logger.Info,            // –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (Info - –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã)
			IgnoreRecordNotFoundError: true,                   // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ "–∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
			Colorful:                  true,                   // –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
		},
	)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{Logger: newLogger})
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏–π
	if err := autoMigrate(db); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏–π: %w", err)
	}

	if err := seedInitialData(db, cfg); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–¥–æ–≤: %v", err)
		// –ù–µ –ø–∞–¥–∞–µ–º ‚Äî —Å–∏–¥—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
	}

	return &Repository{
		auth.NewAuthRepository(db),
		doctor.NewDoctorRepository(db),
		patient.NewPatientRepository(db),
		receptionSmp.NewReceptionSmpRepository(db),
		medcard.NewMedicalCardRepository(db),
		tx.NewTxManager(db),
	}, nil

}

func autoMigrate(db *gorm.DB) error {
	// üî• –¢–æ–ª—å–∫–æ –¥–ª—è dev! –£–¥–∞–ª—è–µ–º –í–°–Å
	log.Println("üóëÔ∏è Dropping all tables...")

	// –°–Ω–∞—á–∞–ª–∞ –¥–æ—á–µ—Ä–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (—Å FK), –ø–æ—Ç–æ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ
	_ = db.Migrator().DropTable(&entities.OneCMedicalCard{})
	_ = db.Migrator().DropTable(&entities.OneCPatientListItem{})
	_ = db.Migrator().DropTable(&entities.OneCReception{})
	_ = db.Migrator().DropTable(&entities.AuthUser{})

	log.Println("üÜï Creating tables in correct order...")

	// –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	if err := db.Migrator().CreateTable(&entities.AuthUser{}); err != nil {
		return fmt.Errorf("auth_users: %w", err)
	}
	if err := db.Migrator().CreateTable(&entities.OneCReception{}); err != nil {
		return fmt.Errorf("receptions: %w", err)
	}
	if err := db.Migrator().CreateTable(&entities.OneCPatientListItem{}); err != nil {
		return fmt.Errorf("patient_list: %w", err)
	}
	if err := db.Migrator().CreateTable(&entities.OneCMedicalCard{}); err != nil {
		return fmt.Errorf("med_cards: %w", err)
	}

	log.Println("‚úÖ Migrations completed")
	return nil
}

func seedInitialData(db *gorm.DB, cfg *config.Config) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
	var count int64
	db.Model(&entities.AuthUser{}).Where("login = ?", "user1").Count(&count)
	if count > 0 {
		log.Println("‚ÑπÔ∏è Demo data already exists, skipping seeding")
		return nil
	}

	log.Println("üå± Seeding initial demo data...")

	// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π)
	password := "password123"
	hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return fmt.Errorf("failed to hash password: %w", err)
	}

	// –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
	var authUsers []entities.AuthUser
	var medicalCards []entities.OneCMedicalCard
	var patientListItems []entities.OneCPatientListItem

	for i := 1; i <= 10; i++ {
		login := fmt.Sprintf("+7962284076%d", i)
		patientID := fmt.Sprintf("user%d_id", i)
		fullName := fmt.Sprintf("–ü–∞—Ü–∏–µ–Ω—Ç %d", i)

		// 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		authUsers = append(authUsers, entities.AuthUser{
			Login:    login,
			Password: string(hash),
		})

		// 2. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞
		medicalCards = append(medicalCards, entities.OneCMedicalCard{
			PatientID:   patientID,
			DisplayName: fullName,
			Age:         fmt.Sprintf("%d", 20+i%50),
			BirthDate:   fmt.Sprintf("198%d-0%d-1%d", i%9+1, i%12+1, i%28+1),
			MobilePhone: fmt.Sprintf("+790012345%02d", i),
			Address:     fmt.Sprintf("–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. %d", i),
			Email:       fmt.Sprintf("user%d@example.com", i),
			Workplace:   fmt.Sprintf("–û–û–û \"–ö–æ–º–ø–∞–Ω–∏—è %d\"", i),
			Snils:       fmt.Sprintf("123-456-789 %d", i),

			LegalRepresentative: entities.ClientRef{
				ID:   fmt.Sprintf("rep_%d", i),
				Name: fmt.Sprintf("–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å %d", i),
			},
			Relative: entities.Relative{
				Status: "–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫",
				Name:   fmt.Sprintf("–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ %d", i),
			},
			AttendingDoctor: entities.Doctor{
				FullName:           fmt.Sprintf("–î–æ–∫—Ç–æ—Ä %d", i),
				PolicyOrCertNumber: fmt.Sprintf("POL%d", i),
				AttachmentStart:    "2020-01-01",
				AttachmentEnd:      "2030-01-01",
				Clinic:             fmt.Sprintf("–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞ %d", i),
			},
			Policy: entities.Policy{
				Number: fmt.Sprintf("POLICY%d", i),
				Type:   "–û–ú–°",
			},
			Certificate: entities.Certificate{
				Number: fmt.Sprintf("CERT%d", i),
				Date:   "2023-01-01",
			},
		})

		// 3. –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
		patientListItems = append(patientListItems, entities.OneCPatientListItem{
			PatientID: patientID,
			FullName:  fullName,
			Gender:    i%2 == 0, // —á–µ—Ä–µ–¥—É–µ–º –ø–æ–ª
			BirthDate: fmt.Sprintf("198%d-0%d-1%d", i%9+1, i%12+1, i%28+1),
		})
	}

	// 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	if err := db.CreateInBatches(authUsers, 10).Error; err != nil {
		return fmt.Errorf("failed to seed auth users: %w", err)
	}

	// 2. –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–µ–¥–∫–∞—Ä—Ç!)
	if err := db.CreateInBatches(patientListItems, 10).Error; err != nil {
		return fmt.Errorf("failed to seed patient list items: %w", err)
	}

	// 3. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (–¥–æ—á–µ—Ä–Ω—è—è —Ç–∞–±–ª–∏—Ü–∞)
	if err := db.CreateInBatches(medicalCards, 10).Error; err != nil {
		return fmt.Errorf("failed to seed medical cards: %w", err)
	}

	// –î–æ–±–∞–≤–∏–º –æ–¥–Ω—É –∑–∞—è–≤–∫—É –Ω–∞ —Å–∫–æ—Ä—É—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	emergencyCall := entities.OneCReception{
		CallID: "demo_call_001",
		Status: "received",
		Data:   []byte(`{"patient": "demo", "reason": "test"}`),
	}
	if err := db.Create(&emergencyCall).Error; err != nil {
		log.Printf("‚ö†Ô∏è Warning: failed to seed emergency call: %v", err)
	}

	log.Println("‚úÖ Demo data seeded successfully (10 users, 10 medical cards, 10 patient list items)")
	return nil
}
