// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Аутентифицирует врача по номеру телефона и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Вход в систему",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DoctorLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное создание",
                        "schema": {
                            "$ref": "#/definitions/models.DoctorAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/handlers.IncorrectFormatError"
                        }
                    },
                    "401": {
                        "description": "Неверные учётные данные",
                        "schema": {
                            "$ref": "#/definitions/handlers.IncorrectDataError"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/handlers.InternalServerError"
                        }
                    }
                }
            }
        },
        "/medcard/{pat_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MedicalCard"
                ],
                "summary": "Get medical card by patient ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID",
                        "name": "pat_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.OneCMedicalCard"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MedicalCard"
                ],
                "summary": "Update medical card by patient ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Patient ID",
                        "name": "pat_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Medical card update data",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.OneCMedicalCard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/onec/auth": {
            "post": {
                "description": "Syncs a batch of users (login + password) received from 1C into the internal auth system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Sync users from 1C",
                "parameters": [
                    {
                        "description": "List of users to sync",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthCreditionals"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/patients": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Patients"
                ],
                "summary": "Get cached patient list from 1C with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PatientListResponse"
                        }
                    }
                }
            }
        },
        "/signature/{recep_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the base64-encoded signature image for a given reception ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Emergency"
                ],
                "summary": "Get patient signature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reception ID",
                        "name": "recep_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts a multipart form with a 'signature' file (e.g., PNG, JPG) and saves it.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Emergency"
                ],
                "summary": "Upload patient signature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reception ID",
                        "name": "recep_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Signature image file",
                        "name": "signature",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/webhook/onec/patients": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "1C"
                ],
                "summary": "Webhook from 1C: patient list update",
                "parameters": [
                    {
                        "description": "Patient list update from 1C",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.PatientListUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/webhook/onec/receptions": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "1C"
                ],
                "summary": "Webhook from 1C: new receptions",
                "parameters": [
                    {
                        "description": "Receptions update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Call"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/ws/notification/register/{user_id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Подписаться на уведомления",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/ws/notification/unregister/{user_id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Отписаться от уведомлений",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.Certificate": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                }
            }
        },
        "entities.ClientRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.Doctor": {
            "type": "object",
            "properties": {
                "attachment_end": {
                    "type": "string"
                },
                "attachment_start": {
                    "type": "string"
                },
                "clinic": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "policy_or_cert_number": {
                    "type": "string"
                }
            }
        },
        "entities.OneCMedicalCard": {
            "type": "object",
            "properties": {
                "additional_phone": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "age": {
                    "type": "string"
                },
                "attending_doctor": {
                    "$ref": "#/definitions/entities.Doctor"
                },
                "birth_date": {
                    "type": "string"
                },
                "certificate": {
                    "$ref": "#/definitions/entities.Certificate"
                },
                "display_name": {
                    "description": "Основные поля",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "legal_representative": {
                    "description": "Вложенные структуры",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.ClientRef"
                        }
                    ]
                },
                "mobile_phone": {
                    "type": "string"
                },
                "patient_id": {
                    "type": "string"
                },
                "policy": {
                    "$ref": "#/definitions/entities.Policy"
                },
                "relative": {
                    "$ref": "#/definitions/entities.Relative"
                },
                "snils": {
                    "type": "string"
                },
                "workplace": {
                    "type": "string"
                }
            }
        },
        "entities.OneCPatientListItem": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "description": "в формате \"YYYY-MM-DD\"",
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "gender": {
                    "description": "true — мужской",
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "medical_card": {
                    "$ref": "#/definitions/entities.OneCMedicalCard"
                },
                "patientID": {
                    "type": "string"
                }
            }
        },
        "entities.PatientListUpdate": {
            "type": "object",
            "properties": {
                "patients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.OneCPatientListItem"
                    }
                }
            }
        },
        "entities.Policy": {
            "type": "object",
            "properties": {
                "number": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "entities.Relative": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "handlers.AuthCreditionals": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.OneCUser"
                    }
                }
            }
        },
        "handlers.IncorrectDataError": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 401
                        },
                        "message": {
                            "type": "string",
                            "example": "Некорректные данные"
                        }
                    }
                },
                "status": {
                    "description": "error",
                    "type": "string",
                    "example": "IncorrectDataError"
                }
            }
        },
        "handlers.IncorrectFormatError": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 400
                        },
                        "message": {
                            "type": "string",
                            "example": "Неверный формат запроса"
                        }
                    }
                },
                "status": {
                    "description": "error",
                    "type": "string",
                    "example": "IncorrectFormatError"
                }
            }
        },
        "handlers.InternalServerError": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 500
                        },
                        "message": {
                            "type": "string",
                            "example": "Внутренняя ошибка сервера"
                        }
                    }
                },
                "status": {
                    "description": "error",
                    "type": "string",
                    "example": "InternalServerError"
                }
            }
        },
        "handlers.OneCUser": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "doc1"
                },
                "password": {
                    "type": "string",
                    "example": "secret123"
                }
            }
        },
        "models.Call": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Адрес (адрес вызова)",
                    "type": "string"
                },
                "call_id": {
                    "type": "string"
                },
                "patient_count": {
                    "description": "Кол-во пациентов",
                    "type": "integer"
                },
                "patients": {
                    "description": "Данные пациентов",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Patient"
                    }
                },
                "phone": {
                    "description": "Телефон пациента",
                    "type": "string"
                },
                "status": {
                    "description": "Статус вызова",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CallStatus"
                        }
                    ]
                }
            }
        },
        "models.CallStatus": {
            "type": "string",
            "enum": [
                "Выполнен",
                "В работе"
            ],
            "x-enum-varnames": [
                "CallStatusCompleted",
                "CallStatusWork"
            ]
        },
        "models.DoctorAuthResponse": {
            "description": "Ответ с данными авторизованного врача",
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID врача",
                    "type": "integer",
                    "example": 1
                },
                "token": {
                    "description": "JWT токен",
                    "type": "string",
                    "example": "eyJhbGciOi..."
                }
            }
        },
        "models.DoctorLoginRequest": {
            "description": "Запрос для входа врача в систему",
            "type": "object",
            "required": [
                "password",
                "phone"
            ],
            "properties": {
                "password": {
                    "description": "Пароль",
                    "type": "string",
                    "example": "123"
                },
                "phone": {
                    "description": "Логин (телефон)",
                    "type": "string",
                    "example": "+79622840765"
                }
            }
        },
        "models.Patient": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Возраст",
                    "type": "string"
                },
                "birth_date": {
                    "description": "Дата рождения",
                    "type": "string"
                },
                "certificate": {
                    "description": "Сертификат",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.Certificate"
                        }
                    ]
                },
                "full_name": {
                    "description": "ФИО",
                    "type": "string"
                },
                "gender": {
                    "description": "Пол: true — мужской, false — женский",
                    "type": "boolean"
                },
                "phone": {
                    "description": "Телефон",
                    "type": "string"
                },
                "policy": {
                    "description": "Полис",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.Policy"
                        }
                    ]
                },
                "snils": {
                    "description": "СНИЛС",
                    "type": "string"
                }
            }
        },
        "models.PatientListResponse": {
            "type": "object",
            "properties": {
                "patient": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.OneCPatientListItem"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \"Bearer \u003cJWT\u003e\" to authenticate",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "ClinicHub API",
	Description:      "API для работы с приёмами пациентов",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
